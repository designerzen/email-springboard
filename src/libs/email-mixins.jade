//-
	Docs : ___________________________________________________________________________________________
	
	Element Class Name 	Description
	table 	container 	Constrains the content to a 580px wrapper on large screens (95% on small screens) and centers it within the body.
	table 	row 		Separates each row of content.
	td 		wrapper 	Wraps each .columns table, in order to create a gutter between columns and force them to expand to full width on small screens.
	td 		last 		Class applied to the last .wrapper td in each row in order for the gutter to work properly. If you only have one (presumably full-width) .columns table (and therefore one .wrapper td) in a row, the .wrapper td still needs to have the last class applied to it.
	table 	{number} 	Can be any number between one and twelve (spelled out). Used to determine how wide your .columns tables are. The number of columns in each row should add up to 12, including offset columns .
	table 	columns 	Table that displays as n-twelfths of the width of the 580px .container table on large screens, and expands to the full width of the .container table on small screens.
	td 		expander 	An empty (and invisible) element added after the content element in a .columns table. It forces the content td to expand to the full width of the screen on small devices, instead of just the width of the content within the td.
	Number of Columns 	Internal Width (in px)
	1 	30
	2 	80
	3 	130
	4 	180
	5 	230
	6 	280
	7 	330
	8 	380
	9 	430
	10 	480
	11 	530
	12 	580


//- Restrict width to 580px
mixin container()
	table.container
		tr
			td
				if block
					block

//- Fill Containers with Rows!
mixin row()
	- var tableClasses = ( attributes.class ) ? 'row '+attributes.class : 'row';
	table(class!=tableClasses )
		tr
			if block
				block


mixin fullWidthRow()
	table.row
		tr
			td(class="center", align="center")
				center
					if block
						block

						
//- Fill Rows with Columns!
mixin column( size, isLast, centralise, offset )
	- var convertFromNumber = function( sizeInt ){ switch ( sizeInt ){ case 1:return 'one'; case 2:return 'two'; case 3:return 'three'; case 4:return 'four'; case 5:return 'five'; case 6:return 'six'; case 7:return 'seven'; case 8:return 'eight'; case 9:return 'nine'; case 10:return 'ten'; case 11:return 'eleven'; case 12: case 0: default: return 'twelve' } }
	- var convertedSize = !isNaN(parseFloat(size)) && isFinite(size) ? convertFromNumber(size) : size
	- var convertedOffset = !isNaN(parseFloat(offset)) && isFinite(offset) ? convertFromNumber(offset) : offset
	- var lastColumn = isLast
	- if (!convertedSize) convertedSize = 'twelve'
	- if (convertedSize === 'twelve') lastColumn = true
	- var offsetClass = (offset) ? 'offset-by-'+convertedOffset : '' 
	- var lastClass = (lastColumn == true) ? 'wrapper last '+offsetClass : 'wrapper '+offsetClass 
	- var tdClasses = (centralise == true ) ? 'center' : ''
	- var tableClasses = 'column ' + convertedSize;
	- if (attributes.class) tdClasses += ' '+attributes.class
	td(class='#{lastClass}')
		table( class!=tableClasses )
			tr
				if (centralise == true )
					td(class!=tdClasses )
						center
							if block
								block
				else
					td(class!=tdClasses )
						if block
							block
							
				td.expander

mixin subgrid()
	tr


//- Fill Columns with Sub-Columns!
mixin subcolumn( size, isLast, centralise )
	- var convertFromNumber = function( sizeInt ){ switch ( sizeInt ){ case 1:return 'one'; case 2:return 'two'; case 3:return 'three'; case 4:return 'four'; case 5:return 'five'; case 6:return 'six'; case 7:return 'seven'; case 8:return 'eight'; case 9:return 'nine'; case 10:return 'ten'; case 11:return 'eleven'; case 12: case 0: default: return 'twelve' } }
	- var convertedSize = !isNaN(parseFloat(size)) && isFinite(size) ? convertFromNumber(size) : size
	- var lastClass = (isLast == true) ? 'last ' : '' 
	if (centralise == true )
		td( class="#{convertedSize} sub-columns center #{lastClass}" )
			center
				if block
					block
	else
		td( class="#{convertedSize} sub-columns #{lastClass}" )
			if block
				block
				
	if (isLast == true) 
		td.expander

		
		
		
		
//- two-up
mixin blocks( quantity )
	- var convertFromNumber = function( sizeInt ){ switch ( sizeInt ){ case 1:return 'one-up'; case 2:return 'two-up'; case 3:return 'three-up'; case 4:return 'four-up'; case 5:return 'five-up'; case 6:return 'six-up'; case 7:return 'seven-up'; case 8:return 'eight-up'; case 9:return 'nine-up'; case 10:return 'ten-up'; case 11:return 'eleven-up'; case 12: case 0: default: return 'twelve-up' } }
	- var convertedSize = !isNaN(parseFloat(quantity)) && isFinite(quantity) ? convertFromNumber(quantity) : quantity
	- var blockClasses = 'block-grid '+convertedSize
	- if (attributes.class) blockClasses += ' '+attributes.class
	table(class!=blockClasses)
		tr
			if block
				block
			
mixin blockContent()
	td( class!=attributes.class )
		if block
			block
			

			
			
			
//- Create a Block Filled Element
mixin panel()
	td.panel( class!=attributes.class )
		if block
			block
	td.expander

mixin expand
	td.expander

//- NB. ENSURE that you have an alt tag!
//- Alt text is the alternative text that appears when images arenâ€™t loaded in an email
mixin image( src, centralise, alt )
	if (centralise != false )
		center
			img(class="center", src=src, alt=alt )
	else
		img( src=src, alt=alt)


mixin retinaImage( src, width, height, centralise, alt )
	if (centralise != false )
		center
			img( class="center", src=src, width=width, height=height, alt=alt )
	else
		img( src=src, width=width, height=height, alt=alt )
	

//- == BUTTONS ====================================================================================

mixin button( link, name )
	table( class!=attributes.class )
		tr
			td
				
				if block
					a(href=link)= block
				else
					a(href=link)= name


mixin tiny-button( link, name )
	if (attributes.class)
		+button( link, name )( class='tiny-button #{attributes.class}' )
	else
		+button( link, name )( class='tiny-button' )
	

mixin small-button( link, name )
	if (attributes.class)
		+button( link, name )( class='small-button #{attributes.class}' )
	else
		+button( link, name )( class='small-button' )
	
		
mixin medium-button( link, name )
	if (attributes.class)
		+button( link, name )( class='medium-button #{attributes.class}' )
	else
		+button( link, name )( class='medium-button' )
	
		
mixin large-button( link, name )
	if (attributes.class)
		+button( link, name )( class='large-button #{attributes.class}' )
	else
		+button( link, name )( class='large-button' )